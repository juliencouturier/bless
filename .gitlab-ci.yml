stages:
  - build_env
  - report  
  - build
  - publish


# Il est nécessaire de définir les variables d'environnemnt : 
#    - VAULT_PATH au niveau du projet GIT : chemin vers les éléments vault nécessaires au test
#    - VAULT_ADDR au niveau de l'instance GIT : URL de l'instance vault à utiliser
#    - VAULT_PYPI_PATH au niveau de l'instance GIT : chemin vers les éléments vault pour utiliser Pypi (user, password er url pour l'upload et index pour le download)


# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python
image: python:3.10

# This folder is cached between builds
# http://docs.gitlab.com/ee/ci/yaml/README.html#cache
cache:
  paths:
    - ~/.cache/pip/
    - .public

# This is a basic example for a gem or script which doesn't use
before_script:
  - python -V  # Print out python version for debugging
  # Install requirements
  - pip install --index $PYPI_URL_CREDENTIALS --index-url  $PYPI_URL_CREDENTIALS/simple -r requirements.txt


get_var_from_vault:
  stage: build_env
  image: vault:1.13.3
  before_script:
    - echo $CI_COMMIT_REF_NAME
    - echo $CI_COMMIT_REF_PROTECTED
  script:
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=gitlab-dev jwt=$CI_JOB_JWT)" 
    - |
      cat <<EOF > vault.env
      TOKEN=$VAULT_TOKEN
      PYPI_URL_CREDENTIALS=`vault kv get --field=index $VAULT_PYPI_PATH`
      TWINE_USERNAME=`vault kv get --field=user $VAULT_PATH`
      TWINE_PASSWORD=`vault kv get --field=password $VAULT_PATH`
      PYPI_UPLOAD_URL=`vault kv get --field=url $VAULT_PATH`
      EOF
  artifacts:
    reports:
      dotenv: vault.env
    expire_in: 1 hour

pylint:
  stage: test
  script:
    - mkdir -p badges
    - mkdir -p .public
    - echo undefined > badges/$CI_JOB_NAME.score
    - pip install pylint_gitlab anybadge
    - pylint --exit-zero --output-format=text $(find -type f -name "*.py" ! -path "**/.venv/**") | tee /tmp/pylint.txt
    - sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' /tmp/pylint.txt > badges/$CI_JOB_NAME.score
    - pylint --exit-zero --output-format=pylint_gitlab.GitlabCodeClimateReporter $(find -type f -name "*.py" ! -path "**/.venv/**") > badges/$CI_JOB_NAME.json
    - pylint --exit-zero --output-format=pylint_gitlab.GitlabPagesHtmlReporter $(find -type f -name "*.py" ! -path "**/.venv/**") > .public/$CI_JOB_NAME.html
  after_script:
    - anybadge --overwrite --label $CI_JOB_NAME --value=$(cat badges/$CI_JOB_NAME.score) --file=badges/$CI_JOB_NAME.svg 4=red 6=orange 8=yellow 10=green
    - |
      echo "Your score is: $(cat badges/$CI_JOB_NAME.score)"
  artifacts:
    paths:
      - badges
    reports:
      codequality: badges/$CI_JOB_NAME.json

pages:
  stage: report
  script:
    - mv .public public
  artifacts:
    paths:
      - public


build:
  stage: build
  script:
    - pip install build
    - rm -f dist/*whl
    - rm -f dist/*tar.gz
    - python -m build --sdist --wheel
  artifacts:
    paths:
      - dist

publish:
  stage: publish
  script:
    - pip install build twine
    - rm -f dist/*whl
    - rm -f dist/*tar.gz
    - python -m build --sdist --wheel
    - TWINE_PASSWORD=${TWINE_PASSWORD} TWINE_USERNAME=${TWINE_USERNAME} python -m twine upload --repository-url ${PYPI_UPLOAD_URL} dist/*
  only:
    - tags